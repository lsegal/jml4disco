<?xml version="1.0" encoding="UTF-8"?>
<?eclipse version="3.2"?>
<plugin>

	<!-- This extension causes the JML-ESC UI class to be
		automatically started when Eclipse starts.  The Eclipse
		docs rail against this, and perhaps we can avoid doing this
		in the future.  For now it is needed to get the functionality
		in this plugin's start method going before compilations are
		executed.
	-->
	<extension 
		point="org.eclipse.ui.startup">
     	<startup class="org.jmlspecs.eclipse.jdt.ui.Activator"/>
    </extension>

	<!-- This enables an entry in the list of help documents for the JML help --> 
    <extension
         point="org.eclipse.help.toc">
      <toc file="html/jmlescHelpToc.xml" primary="true" />
    </extension>

	<!-- This creates an entry in the preference pages for a set of JML pages -->
	<!-- The category attribute determines that the entry appears under 'Java' in the outline --> 
    <extension
         point="org.eclipse.ui.preferencePages">
      <page
            category="org.eclipse.jdt.ui.preferences.JavaBasePreferencePage"
            class="org.jmlspecs.eclipse.jdt.ui.preferences.JmlPreferencePage"
            id="org.jmlspecs.eclipse.jdt.ui.preferences.JmlPreferencePage"
            name="JML">
      </page>
   </extension>
   
   <!--  Figure this out - will it help with the initialization problems?
<extension
      point="org.eclipse.core.runtime.preferences">
   <initializer class="org.eclipse.jdt.internal.core.JavaCorePreferenceInitializer"/>
</extension>
<extension
      point="org.eclipse.core.runtime.preferences">
   <modifier class="org.eclipse.jdt.internal.core.JavaCorePreferenceModifyListener"/>
</extension>
-->

   <!-- Not sure what this is for.  The named class does not exist?? FIXME -->
   <!--
   <extension
         point="org.eclipse.core.runtime.preferences">
      <initializer
            class="org.jmlspecs.eclipse.jdt.ui.preferences.PreferenceInitializer">
      </initializer>
   </extension>
   -->
   
	<!--  This extension defines a new marker type for Esc/Java problems --> 
	<!--  The attribute is used to associate additional information with the marker --> 
  
	<extension id="escjavaWarningMarker" name="ESC/Java2 Warning" point="org.eclipse.core.resources.markers">
 	 	<super type="org.eclipse.jdt.core.problem" /> 
	  	<persistent value="true" /> 
	  	<attribute name="declarationInfo" /> 
	</extension>
  
	<!--  Provides the image for the markers --> 
	<extension point="org.eclipse.ui.editors.markerAnnotationSpecification">
		<specification icon="icons/escjava_problem.gif" annotationType="org.jmlspecs.eclipse.jdt.ui.escjavaProblemAnnotation" /> 
	</extension>

	<!--  Provides another image for the markers --> 
	<extension point="org.eclipse.ui.editors.markerAnnotationSpecification">
		<specification icon="icons/escjava_warning.gif" annotationType="org.jmlspecs.eclipse.jdt.ui.escjavaWarningAnnotation" /> 
	</extension>

	<!--  Sets the marker type to use in the editor for errors --> 
	<extension point="org.eclipse.ui.editors.annotationTypes">
		<type markerType="org.jmlspecs.eclipse.jdt.ui.escjavaWarningMarker" super="org.eclipse.ui.workbench.texteditor.error" name="org.jmlspecs.eclipse.jdt.ui.escjavaProblemAnnotation" markerSeverity="2" /> 
	</extension>

	<!--  Sets the marker type to use in the editor for warnings --> 
	<extension point="org.eclipse.ui.editors.annotationTypes">
		<type markerType="org.jmlspecs.eclipse.jdt.ui.escjavaWarningMarker" super="org.eclipse.ui.workbench.texteditor.error" name="org.jmlspecs.eclipse.jdt.ui.escjavaWarningAnnotation" markerSeverity="1" /> 
	</extension>

	<!--  Sets the marker type to use in the editor for info --> 
	<extension point="org.eclipse.ui.editors.annotationTypes">
		<type markerType="org.jmlspecs.eclipse.jdt.ui.escjavaWarningMarker" super="org.eclipse.ui.workbench.texteditor.error" name="org.jmlspecs.eclipse.jdt.ui.escjavaWarningAnnotation" markerSeverity="0" /> 
	</extension>

	<!-- FIXME The examples of other tools seem to indicate 
	that the following would produce special icons in the
	Problems View.  But this does not.  
	--> 
	<!-- 
 	<extension
         point="org.eclipse.ui.ide.markerImageProviders">
      <imageprovider
            markertype="org.jmlspecs.eclipse.jdt.ui.escjavaWarningMarker"
            icon="icons/escjava_problem.gif"
            class="org.jmlspecs.eclipse.jdt.ui.EscjavaMarker$Provider"
            id="org.jmlspecs.eclipse.jdt.ui.escjavaMarkerImageProvider">
      </imageprovider>
 	</extension>
	--> 

	<!--  FIXME - comment here 
	<extension point="org.eclipse.ui.ide.markerResolution">
		<markerResolutionGenerator markerType="org.jmlspecs.eclipse.jdt.ui.escjavaWarningMarker" class="org.jmlspecs.eclipse.jdt.ui.MarkerResolutionGenerator" /> 
	</extension>
  	--> 
   
	<!-- This extension adds menubar and toolbar items for initiating
		various Esc/Java operations.  The menu itmes are placed under 
		the same top-level menu item as JML operations (named 'JML')
		but in a different group.  The toolbar item is placed in the
		same toolbar group.
		-->
<!-- TODO - this should be changed to use org.eclipse.ui.menus -->	 
   <extension
         point="org.eclipse.ui.actionSets">
         <actionSet
            label="EscJava Actions"
            visible="true"
            id="org.jmlspecs.eclipse.jdt.ui.actionSet">
         <menu
               label="JML"
               id="JMLMenu">
            <separator
                  name="EscjavaGroup">
            </separator>
         </menu>
  <!--      
         <action
               label="Disable auto ESC/Java2 checking"
               tooltip="Disables selected objects for auto ESC/Java2 checking"
               class="org.jmlspecs.eclipse.jdt.ui.EscjavaAction$DisableESC"
               menubarPath="JMLMenu/EscjavaGroup"
               id="org.jmlspecs.eclipse.jdt.ui.EscjavaAction.DisableESC"
			   definitionId="org.jmlspecs.eclipse.jdt.ui.commands.DisableESC">
         </action>
         <action
               label="Enable auto ESC/Java2 checking"
               tooltip="Enables selected objects for auto ESC/Java2 checking"
               class="org.jmlspecs.eclipse.jdt.ui.EscjavaAction$EnableESC"
               menubarPath="JMLMenu/EscjavaGroup"
               id="org.jmlspecs.eclipse.jdt.ui.EscjavaAction.EnableESC"
			   definitionId="org.jmlspecs.eclipse.jdt.ui.commands.EnableESC">
         </action>
         -->     
         <action
               label="Go to associated specification"
               tooltip="Opens an editor and positions it at the location specified by some information associated with a marker"
               class="org.jmlspecs.eclipse.jdt.ui.EscjavaAction$GoToDecl"
               menubarPath="JMLMenu/EscjavaGroup"
               id="org.jmlspecs.eclipse.jdt.ui.GoToDeclAction"
               definitionId="org.jmlspecs.eclipse.jdt.ui.commands.GoToDeclaration">
         </action>    
         <action
               label="Clear ESC Markers"
               tooltip="Clears any ESC markers in the selected object"
               class="org.jmlspecs.eclipse.jdt.ui.EscjavaAction$Clear"
               menubarPath="JMLMenu/EscjavaGroup"
               id="org.jmlspecs.eclipse.jdt.ui.ClearMarkerAction"
               definitionId="org.jmlspecs.eclipse.jdt.ui.commands.ClearMarkers">
         </action>
         <action
               label="Run static checking"
               tooltip="Runs ESC static checks"
               class="org.jmlspecs.eclipse.jdt.ui.EscjavaAction$Check"
               menubarPath="JMLMenu/EscjavaGroup"
               id="org.jmlspecs.eclipse.jdt.ui.EscjavaAction.Check"
               definitionId="org.jmlspecs.eclipse.jdt.ui.commands.CheckEscjava">
         </action>
	
         <action
               toolbarPath="additions"
               label="ESC"
               tooltip="Runs ESC static checks"
               icon="icons/jml-logo-16x16.png"
               class="org.jmlspecs.eclipse.jdt.ui.EscjavaAction$Check"
               id="org.jmlspecs.eclipse.jdt.ui.EscjavaAction.Check.Toolbar">
         </action>
         
         <action
               toolbarPath="additions"
               label="Clear ESC"
               tooltip="Clears ESC markers"
               icon="icons/JmlLogoDisabled.png"
               class="org.jmlspecs.eclipse.jdt.ui.EscjavaAction$Clear"
               id="org.jmlspecs.eclipse.jdt.ui.EscjavaAction.Clear.Toolbar">
         </action>
         
<!--
            <action
               label="Test Information"
               tooltip="Experimental information"
               class="org.jmlspecs.JMLPlugin.actions.TestInfo"
               menubarPath="JMLMenu/JMLTest"
               id="org.jmlspecs.JMLPlugin.actions.TestInfo">
         </action> 
-->
<!--
         <menu
               label="Setup"
               path="JMLMenu/JMLSetupGroup"
               id="JMLSetup"
               >
               <separator name="JMLSetupSubmenu"/>
         </menu>           
         <action
               label="Disable ESC/Java Nature, remove Builder in SELECTED projects"
               tooltip="Removes the ESC/Java Nature from the project and the ESC/Java Builder from the Incremental builder"
               class="org.jmlspecs.eclipse.jdt.ui.EscjavaAction$DisableEscjava"
               menubarPath="JMLMenu/JMLSetup/JMLSetupSubmenu"
               id="org.jmlspecs.eclipse.jdt.ui.EscjavaAction.DisableEscjava"
			   definitionId="org.jmlspecs.eclipse.jdt.ui.commands.DisableEscjava">
         </action> 
         <action
               label="Enable ESC/Java Nature, add Builder in SELECTED projects"
               tooltip="Adds the ESC/Java Nature to the project and the ESC/Java Builder to the Incremental builder"
               class="org.jmlspecs.eclipse.jdt.ui.EscjavaAction$EnableEscjava"
               menubarPath="JMLMenu/JMLSetup/JMLSetupSubmenu"
               id="org.jmlspecs.eclipse.jdt.ui.EscjavaAction.EnableJML"
			   definitionId="org.jmlspecs.eclipse.jdt.ui.commands.EnableEscjava">
         </action> 
         -->
     </actionSet>
   </extension>

   <!-- These extensions add a menu items
   		to the context menus of projects/packages/compilation units
   		and types in the Package Explorer and other views
   		(on anything recognized as an IJavaElement)
   	-->
   <extension point="org.eclipse.ui.popupMenus">
	<objectContribution 
			objectClass="org.eclipse.jdt.core.IJavaElement" 
			id="org.jmlspecs.eclipse.jdt.ui.EscjavaActionPopupCheck">
  		<action 
  			label="Run ESC" 
  			tooltip="Runs ESC on the project" 
  			class="org.jmlspecs.eclipse.jdt.ui.EscjavaAction$Check" 
  			menubarPath="additions"
  			id="org.jmlspecs.eclipse.jdt.ui.Check.Popup" /> 
  	</objectContribution>

	<objectContribution 
			objectClass="org.eclipse.jdt.core.IJavaElement" 
			id="org.jmlspecs.eclipse.jdt.ui.EscjavaActionPopupClear">
  		<action 
  			label="Clear ESC markers" 
  			tooltip="Clears ESC markers for this item" 
  			class="org.jmlspecs.eclipse.jdt.ui.EscjavaAction$Clear" 
  			menubarPath="additions"
  			id="org.jmlspecs.eclipse.jdt.ui.Clear.Popup" /> 
  	</objectContribution>
   </extension>

<!-- This extension adds a context (right-click) menu item to
the marker in the ruler along the side of an editor -->

     <extension
         point="org.eclipse.ui.popupMenus">
      <viewerContribution
            targetID="#CompilationUnitRulerContext"
            id="org.eclipse.jdt.ui.CompilationUnitEditorPopupActions">
         <action
               label="Go to associated specification"
               tooltip="Opens the declaration referenced by an Esc/Java2 warning"
               class="org.jmlspecs.eclipse.jdt.ui.WarningDeclarationsAction"
               menubarPath="additions"
               icon="icons/jml-logo-16x16.png"
               id="org.jmlspecs.eclipse.jdt.ui.WarningDeclarationsAction">
         </action>
      </viewerContribution>
   </extension>

<!-- FIXME: WOuld like to use the following instead of the viewContribution above 
to add a context menu item to the marker, but I must have the wrong id - have not
been able to make it work.

<extension
         point="org.eclipse.ui.menus">
      <menuContribution
         locationURI="popup:org.eclipse.jdt.ui.CompilationUnitEditor?after=additions">
         <command
               commandId="org.jmlspecs.eclipse.jdt.ui.commands.GoToDeclaration"
               label="Go to associated specification"
               tooltip="Opens the specification referenced by an Esc/Java2 warning"
               class="org.jmlspecs.eclipse.jdt.ui.WarningDeclarationsAction"
               menubarPath="additions"
               id="org.jmlspecs.eclipse.jdt.ui.RulerMenuItem"
               icon="icons/jml-logo-16x16.png"
               >
         </command>
      </menuContribution>
   </extension>
-->

<!-- Adds a context menu item in the ProblemsView -->
<extension
         point="org.eclipse.ui.menus">
      <menuContribution
         locationURI="popup:org.eclipse.ui.views.ProblemView?after=additions">
         <command
               commandId="org.jmlspecs.eclipse.jdt.ui.commands.GoToDeclaration"
               label="Go to associated specification"
               tooltip="Opens the specification referenced by an Esc/Java2 warning"
               id="org.jmlspecs.eclipse.jdt.ui.ProblemsViewMenuItem"
               icon="icons/jml-logo-16x16.png"
               >
         </command> -->
      </menuContribution>
   </extension>

<!-- The following creates commands that are referenced by
	actions above and can be mapped to keys -->      
	
  <extension
	point="org.eclipse.ui.commands">
      <category
            name="JML-ESC"
            description="JML-ESC related commands"
            id="org.jmlspecs.eclipse.jdt.ui.EscjavaCommandCategory">
      </category>
<!--      <command
            name="Enable Esc/Java2 autochecking"
            description="Enables Esc/Java2 autochecking of selected resources"
            categoryId="org.jmlspecs.eclipse.jdt.ui.EscjavaCommandCategory"
            id="org.jmlspecs.eclipse.jdt.ui.commands.EnableESC">
      </command> 
      <command
            name="Disable Esc/Java2 autochecking"
            description="Disables Esc/Java2 autochecking of selected resources"
            categoryId="org.jmlspecs.eclipse.jdt.ui.EscjavaCommandCategory"
            id="org.jmlspecs.eclipse.jdt.ui.commands.DisableESC">
      </command>   -->
      <!--
      <command
            name="Install ESC/Java2"
            description="Installs ESC/Java2 nature and builder on the selected projects"
            categoryId="org.jmlspecs.eclipse.jdt.ui.EscjavaCommandCategory"
            id="org.jmlspecs.eclipse.jdt.ui.commands.EnableEscjava">
      </command>
      <command
            name="Remove ESC/Java2"
            description="Removes ESC/Java2 nature and builder from the given project"
            categoryId="org.jmlspecs.eclipse.jdt.ui.EscjavaCommandCategory"
            id="org.jmlspecs.eclipse.jdt.ui.commands.DisableEscjava">
      </command>
      -->
      <command
            name="Run ESC"
            description="Performs ESC checks on selected Java elements"
            categoryId="org.jmlspecs.eclipse.jdt.ui.EscjavaCommandCategory"
            id="org.jmlspecs.eclipse.jdt.ui.commands.CheckEscjava">
      </command>
      <command
            name="Clear ESC Markers"
            description="Clears all ESC Markers on selected objects"
            categoryId="org.jmlspecs.eclipse.jdt.ui.EscjavaCommandCategory"
            id="org.jmlspecs.eclipse.jdt.ui.commands.ClearMarkers">
      </command>
      <command
            name="Go to associated specification"
            description="Highlights the declaration being violated by a given problem marker"
            categoryId="org.jmlspecs.eclipse.jdt.ui.EscjavaCommandCategory"
            id="org.jmlspecs.eclipse.jdt.ui.commands.GoToDeclaration">
      </command>
  </extension>

<!-- This decorator is applied to compilation units; the associated
	class dynamically determines whether (a) a file and the project
	are enabled for ESC/Java2 checking, (b) only the file is, (c) the file is not.
	It then sets the decorator to one of two icons for (a) and (b)
	and no icon for (c).
	FIXME - is location and icon needed here?
	-->
<!--	
<extension
         point="org.eclipse.ui.decorators">
      <decorator
            lightweight="true"
            location="TOP_LEFT"
            label="ESC/Java2"
            icon="icons/JMLSmall.png"
            state="true"
            class="org.jmlspecs.eclipse.jdt.ui.EscjavaDecorator"
            id="org.jmlspecs.eclipse.jdt.ui.ESCDecorator">
         <description>
            ESC/Java2 checking is enabled for this resource (if assertion checking is enabled globally in the Project Builders Properties page)
         </description>
        <enablement>
                <objectClass name="org.eclipse.jdt.core.ICompilationUnit"/> 
         </enablement>
      </decorator>
 </extension>
-->

<!-- This decorator is applied to Java projects to indicate whether
	they have a Esc/Java2 Nature (with decorator) or not (no decorator).
	FIXME - not used since we are not using Natures -->
<extension
         point="org.eclipse.ui.decorators">
      <decorator
            lightweight="true"
            location="TOP_RIGHT"
            label="ESC/Java2"
            icon="icons/JMLSmall.png"
            state="true"
            id="org.jmlspecs.eclipse.jdt.ui.ESCDecoratorA">
         <description>
            ESC/Java2 nature is enabled for this project
         </description>
        <enablement>
        	<and>
                <objectState name="nature" value="org.jmlspecs.eclipse.jdt.ui.autocheckEscjavaNature"/>
                <objectClass name="org.eclipse.jdt.core.IJavaProject"/> 
             </and>
         </enablement>
         </decorator>
 </extension>

<!-- Not sure if this works or what it is for FIXME
<extension
         point="org.eclipse.ui.decorators">
      <decorator
            lightweight="true"
            location="TOP_RIGHT"
            label="ESC/Java2"
            icon="icons/escjava_problem.gif"
            state="true"
            id="org.jmlspecs.eclipse.jdt.ui.ESCDecorator1">
         <description>
            The problem was found by the ESC/Java2 tools
         </description>
        <enablement>
                <objectState name="id" value="org.jmlspecs.eclipse.jdt.ui.escjavaError"/>
< !- -        	<and>
                <objectState name="id" value="org.jmlspecs.eclipse.jdt.ui.escjavaError"/>
                <objectClass name="org.eclipse.jdt.core.IJavaProject"/> 
             </and> - - >
         </enablement>
         </decorator>
 </extension>
 -->
 
 <!-- This defines the Java editor as the editor to use for the specification files.
   I think this is also where the icon that labels spec files in the Package Explorer
   comes from. -->
 <extension
    point = "org.eclipse.ui.editors">
	<editor
  	   id = "org.jmlspecs.eclipse.ui.JmlSpecsEditor"
  	   name="JmlSpecsEditor"
  	   default="true"
       icon="icons/jml-logo-16x16.png"
       class="org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor"
       contributorClass="org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditorActionContributor"
	   symbolicFontName="org.eclipse.jdt.ui.editors.textfont"
       >
       <contentTypeBinding
               contentTypeId="org.jmlspecs.eclipse.jdt.ui.jmlSpecs"
       /> 
    </editor>
</extension>


<!-- This extension defines a JML content type -->

<extension point="org.eclipse.core.runtime.contentTypes">
	<!-- declares a content type for JML Source files -->
	<content-type id="jmlSpecs" name="JML Specifications" 
		base-type="org.eclipse.core.runtime.text"
		priority="high"				
		file-extensions="jml,spec"/>
</extension>

<!-- This is used by repositories to know if a file type is text or binary -->

<extension point="org.eclipse.team.core.fileTypes">
	<fileTypes extension="jml" type="text"/>
	<fileTypes extension="spec" type="text"/>
</extension>

<!-- This defines a New Specification File wizard -->
<extension point="org.eclipse.ui.newWizards">
      <wizard 
          id="org.jmlspecs.eclipse.jdt.ui.NewJMLWizard" 
          name="Jml Specification" 
          category="org.eclipse.jdt.ui.java"    
          icon="./icons/jml-logo-16x16.png" 
          preferredPerspectives="org.eclipse.jdt.ui.JavaPerspective,org.eclipse.jdt.ui.JavaBrowsingPerspective,org.eclipse.jdt.ui.JavaHierarchyPerspective"
	      finalPerspective="org.eclipse.jdt.ui.JavaPerspective"
	      >
	      <!-- this next entry is not documented, so don't know for sure what it is supposed to do,
	           but copied it from the Eclipse plugins and it works. -->
         <class class="org.jmlspecs.eclipse.jdt.ui.NewJmlSpecWizard">
            <parameter name="javatype" value="true"/>
         </class>
         <!-- 	      class="org.eclipse.ui.wizards.newresource.BasicNewFileResourceWizard"
          -->
          <description> 
              Creates a JML specification file 
          </description> 
          <selection class="org.eclipse.core.resources.IResource"/>   <!-- FIXME - java element instead??? -->     
      </wizard>
      <primaryWizard id="org.jmlspecs.eclipse.jdt.ui.NewJMLWizard"/>
   </extension> 


<!-- This defines an extension which enables the methods of the named class to be
     called when various points of the compilation process are reached.
     -->
 <extension
      id="ESCJava"
      name="EscJavaCompilationParticipant"
      point="org.eclipse.jdt.core.compilationParticipant">
   <compilationParticipant
         class="org.jmlspecs.eclipse.jdt.ui.EscjavaCompilationParticipant"
         id="ESCJavaCompilationParticipant"
         modifiesEnvironment="false"
         createsProblems="true">
    </compilationParticipant>
      <!-- do we need this? -->
     <!-- <managedMarker markerType="org.eclipse.jdt.apt.core.compile.problem"/> -->
 </extension>


</plugin>
